<?php

if (!isset($_GET["token"]))
    return;

require_once __DIR__ . '/../config/config.php';

if ($_GET["token"] != TELEGRAM_TOKEN)
    return;

require_once __DIR__ . '/../vendor/VTelegram/src/autoload.php';
require_once __DIR__ . '/../vendor/SafeMySQL/SafeMySQL.php';
require_once __DIR__ . '/../src/SourceBot.php';

function isUserAllowed(int $id)
{
    return in_array($id, TELEGRAM_ALLOWED_USERS);
}

function processUser(SafeMySQL $db, int $id)
{
    if (!isUserAllowed($id))
        return false;
    $user = SourceBot::authorizeUser($db, $id);
    SourceBot::updateLastActivity($db, $id);
    return $user;
}

$db = new SafeMySQL(DATABASE_OPTIONS);

SourceBot::setToken(TELEGRAM_TOKEN);
SourceBot::enableDynamicCQHandlers();

SourceBot::registerStandardMessageHandler(function (VTgBotController $bot, VTgMessage $message) use (&$db) {
    if (!processUser($db, $message->from->id)) {
        $bot->execute($message->answer('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é.'));
        return;
    }
    $bot->execute($message->answer('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –í—ã–∑–æ–≤–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.'));
});

SourceBot::registerCommandHandler('start', function (VTgBotController $bot, VTgMessage $message, string $data) use (&$db) {
    if (!processUser($db, $message->from->id)) {
        $bot->execute($message->answer('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é.'));
        return;
    }
    $answer = '–Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ source.unn.ru.' . "\n" .
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: /materials\n–û–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è: /webinars\n" .
        //"–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /relogin\n" .
        "–í–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: /subscribe";
    $bot->execute($message->answer($answer));
});

SourceBot::registerCommandHandler('help', function (VTgBotController $bot, VTgMessage $message, string $data) use (&$db) {
    if (!processUser($db, $message->from->id)) {
        $bot->execute($message->answer('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é.'));
        return;
    }
    $answer = '–Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ source.unn.ru.' . "\n" .
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: /materials\n–û–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è: /webinars\n" .
        //"–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /relogin\n" .
        "–í–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: /subscribe";
    $bot->execute($message->answer($answer));
});

SourceBot::registerCommandHandler('relogin', function (VTgBotController $bot, VTgMessage $message, string $data) use (&$db) {
    if (!processUser($db, $message->from->id)) {
        $bot->execute($message->answer('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é.'));
        return;
    }
    SourceBot::reLogin(SOURCE_LOGIN, SOURCE_PASSWORD);
    $bot->execute($message->answer('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.'));
});

SourceBot::registerCommandHandler('materials', function (VTgBotController $bot, VTgMessage $message, string $data) use (&$db) {
    if (!processUser($db, $message->from->id)) {
        $bot->execute($message->answer('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é.'));
        return;
    }
    $subjects = SourceBot::getSubjects();
    $buttons = [];
    foreach ($subjects['full'] as $subject)
        $buttons[] = [$subject, 'S_' . md5($subject)];
    $extraParameters = [
        'reply_markup' => VTgInlineKeyboard::grid(2, $buttons)->json()
    ];
    $answer = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n";
    foreach ($subjects['full'] as $key => $subject)
        $answer .= ($key + 1) . '. ' . $subject . "\n";
    $bot->execute($message->answer($answer, $extraParameters));
});

SourceBot::registerCommandHandler('webinars', function (VTgBotController $bot, VTgMessage $message, string $data) use (&$db) {
    if (!processUser($db, $message->from->id)) {
        $bot->execute($message->answer('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é.'));
        return;
    }
    $answer = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è: \n\n";
    $webinars = SourceBot::getCachedWebinars();
    if ($webinars['upcoming_count'] > 0) {
        foreach ($webinars['webinars'] as $entry)
            if ($entry['is_upcoming'])
                $answer .= 'üñ• ' . $entry['date'] . ' ' . $entry['login'] . "\n" . $entry['title'] . "\nURL —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: " . $entry['stream_link'] . "\n" . $entry['comment'] . "\n";
    } else {
        $answer .= '–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π.';
    }
    $extraParameters = [
        'reply_markup' => VTgInlineKeyboard::singleP('üìö –ü—Ä–æ—à–µ–¥—à–∏–µ', 'W_old')->json()
    ];
    $bot->execute($message->answer($answer, $extraParameters));
});

SourceBot::registerCommandHandler('subscribe', function (VTgBotController $bot, VTgMessage $message, string $data) use (&$db) {
    if (!processUser($db, $message->from->id)) {
        $bot->execute($message->answer('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é.'));
        return;
    }
    SourceBot::subscribeUser($db, $message->from->id);
    $bot->execute($message->answer("üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è—Ö.\n–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: /unsubscribe"));
});

SourceBot::registerCommandHandler('unsubscribe', function (VTgBotController $bot, VTgMessage $message, string $data) use (&$db) {
    if (!processUser($db, $message->from->id)) {
        $bot->execute($message->answer('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é.'));
        return;
    }
    SourceBot::unsubscribeUser($db, $message->from->id);
    $bot->execute($message->answer("üîï –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è—Ö.\n–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: /unsubscribe"));
});

SourceBot::registerDynamicCQHandler('S_%a', function (VTgBotController $bot, VTgCallbackQuery $query, array $params) use (&$db) {
    if (!processUser($db, $query->from->id))
        return;
    $param = $params[1];
    if ($param == 'all') {
        $subjects = SourceBot::getSubjects();
        $buttons = [];
        foreach ($subjects['full'] as $subject)
            $buttons[] = [$subject,  'S_' . md5($subject)];
        $message = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n";
        foreach ($subjects['full'] as $key => $subject)
            $message .= ($key + 1) . '. ' . $subject . "\n";
        $bot->execute($query->editMessageText($message, ['reply_markup' => VTgInlineKeyboard::grid(2, $buttons)->json()]));
    } else {
        $subjectInfo = SourceBot::getSubjectInfo($param);
        if (isset($subjectInfo['error'])) {
            $bot->execute($query->editMessageText($subjectInfo['error']));
            return;
        }
        $message = $subjectInfo['subject'] . "\n\n" .
            'üìÑ –§–∞–π–ª–æ–≤: ' . $subjectInfo['files_count'] . "\n";
        $buttons = [];
        if ($subjectInfo['files_count'] > 0) {
            $message .= '–ü–æ—Å–ª–µ–¥–Ω–∏–π: ' . $subjectInfo['files_last']['name'] . ' (–∑–∞–≥—Ä—É–∂–µ–Ω ' . $subjectInfo['files_last']['date'] . ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' . $subjectInfo['files_last']['login'] . ")\n–°–∫–∞—á–∞—Ç—å: " . $subjectInfo['files_last']['link'] . "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " . $subjectInfo['files_last']['comment'] . "\n\n";
            $buttons[] = ['üìÑ –§–∞–π–ª—ã', 'F_' . $param];
        }
        $message .= 'üîó –°—Å—ã–ª–æ–∫: ' . $subjectInfo['links_count'] . "\n";
        if ($subjectInfo['links_count'] > 0) {
            $message .= '–ü–æ—Å–ª–µ–¥–Ω—è—è: ' . $subjectInfo['links_last']['link'] . ' (–¥–æ–±–∞–≤–ª–µ–Ω–∞ ' . $subjectInfo['links_last']['date'] . ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' . $subjectInfo['links_last']['login'] . ")\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " . $subjectInfo['links_last']['comment'] . "\n";
            $buttons[] = ['üîó –°—Å—ã–ª–∫–∏', 'L_' . $param];
        }
        $buttons[] = ['‚¨ÜÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã', 'S_all'];
        $bot->execute($query->editMessageText($message, ['reply_markup' => VTgInlineKeyboard::row($buttons)->json()]));
    }
});

SourceBot::registerDynamicCQHandler('L_%a', function (VTgBotController $bot, VTgCallbackQuery $query, array $params) use (&$db) {
    if (!processUser($db, $query->from->id))
        return;
    $param = $params[1];
    define('LINKS_PER_PAGE', 7);
    $pagingData = explode('_', $param);
    $subjectHash = $pagingData[0];
    $pageCurrent = isset($pagingData[1]) ? (int) $pagingData[1] : 0;
    $hPageCurrent = $pageCurrent + 1;
    $buttons = [];
    $callbackDataPrefix = 'L_' . $subjectHash . '_';
    $links = SourceBot::getSubjectLinks($subjectHash);
    if (isset($links['error'])) {
        $bot->execute($query->editMessageText($links['error']));
        return;
    }
    $message = $links['subject'] . " (—Å—Å—ã–ª–∫–∏):\n\n";
    $linksCount = count($links['links']);
    $pagesCount = ceil($linksCount / LINKS_PER_PAGE);
    $pageLinks = array_slice(array_reverse($links['links']), $pageCurrent * LINKS_PER_PAGE, LINKS_PER_PAGE);
    foreach ($pageLinks as $link)
        $message .= SourceBot::composeLinkSnippet($link);
    if ($linksCount > LINKS_PER_PAGE) {
        if ($pageCurrent == 0)
            $buttons[0] = [
                ['‚èπ', $callbackDataPrefix . '0'],
                ['1', $callbackDataPrefix . '0'],
                ['‚ñ∂Ô∏è', $callbackDataPrefix . '1']
            ];
        elseif ($pageCurrent == $pagesCount - 1)
            $buttons[0] = [
                ['‚óÄÔ∏è', $callbackDataPrefix . ($pageCurrent - 1)],
                [$hPageCurrent, $callbackDataPrefix . $pageCurrent],
                ['‚èπ', $callbackDataPrefix . $pageCurrent]
            ];
        else
            $buttons[0] = [
                ['‚óÄÔ∏è', $callbackDataPrefix . ($pageCurrent - 1)],
                [$hPageCurrent, $callbackDataPrefix . $pageCurrent],
                ['‚ñ∂Ô∏è', $callbackDataPrefix . ($pageCurrent + 1)]
            ];
    }
    $buttons[] = [['üìÑ –§–∞–π–ª—ã', 'F_' . $subjectHash], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'S_' . $subjectHash], ['‚¨ÜÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã', 'S_all']];
    $bot->execute($query->editMessageText($message, ['reply_markup' => VTgInlineKeyboard::table($buttons)->json()]));
    $bot->execute($query->answerWithText('–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ' . $hPageCurrent . ' –∏–∑ ' . $pagesCount));
});

SourceBot::registerDynamicCQHandler('F_%a', function (VTgBotController $bot, VTgCallbackQuery $query, array $params) use (&$db) {
    if (!processUser($db, $query->from->id))
        return;
    $param = $params[1];
    define('FILES_PER_PAGE', 7);
    $pagingData = explode('_', $param);
    $subjectHash = $pagingData[0];
    $pageCurrent = isset($pagingData[1]) ? (int) $pagingData[1] : 0;
    $hPageCurrent = $pageCurrent + 1;
    $buttons = [];
    $callbackDataPrefix = 'F_' . $subjectHash . '_';
    $files = SourceBot::getSubjectFiles($subjectHash);
    if (isset($files['error'])) {
        $bot->execute($query->editMessageText($files['error']));
        return;
    }
    $message = $files['subject'] . " (—Ñ–∞–π–ª—ã):\n\n";
    $filesCount = count($files['files']);
    $pagesCount = ceil($filesCount / FILES_PER_PAGE);
    $pageFiles = array_slice(array_reverse($files['files']), $pageCurrent * FILES_PER_PAGE, FILES_PER_PAGE);
    foreach ($pageFiles as $file)
        $message .= SourceBot::composeFileSnippet($file);
    if ($filesCount > FILES_PER_PAGE) {
        if ($pageCurrent == 0)
            $buttons[0] = [
                ['‚èπ', $callbackDataPrefix . '0'],
                ['1', $callbackDataPrefix . '0'],
                ['‚ñ∂Ô∏è', $callbackDataPrefix . '1']
            ];
        elseif ($pageCurrent == $pagesCount - 1)
            $buttons[0] = [
                ['‚óÄÔ∏è', $callbackDataPrefix . ($pageCurrent - 1)],
                [$hPageCurrent, $callbackDataPrefix . $pageCurrent],
                ['‚èπ', $callbackDataPrefix . $pageCurrent]
            ];
        else
            $buttons[0] = [
                ['‚óÄÔ∏è', $callbackDataPrefix . ($pageCurrent - 1)],
                [$hPageCurrent, $callbackDataPrefix . $pageCurrent],
                ['‚ñ∂Ô∏è', $callbackDataPrefix . ($pageCurrent + 1)]
            ];
    }
    $buttons[] = [['üîó –°—Å—ã–ª–∫–∏', 'L_' . $subjectHash], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'S_' . $subjectHash], ['‚¨ÜÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã', 'S_all']];
    $bot->execute($query->editMessageText($message, ['reply_markup' => VTgInlineKeyboard::table($buttons)->json()]));
    $bot->execute($query->answerWithText('–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ' . $hPageCurrent . ' –∏–∑ ' . $pagesCount));
});

SourceBot::registerDynamicCQHandler('W_%a', function (VTgBotController $bot, VTgCallbackQuery $query, array $params) use (&$db) {
    if (!processUser($db, $query->from->id))
        return;
    $param = $params[1];
    define('WEBINARS_PER_PAGE', 5);
    $pagingData = explode('_', $param);
    $pageCurrent = isset($pagingData[1]) ? (int) $pagingData[1] : 0;
    $hPageCurrent = $pageCurrent + 1;
    $buttons = [];
    if ($pagingData[0] == 'old') {
        $message = "–ü—Ä–æ—à–µ–¥—à–∏–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è: \n\n";
        $webinars = SourceBot::getCachedWebinars();
        $pagesCount = ceil($webinars['old_count'] / WEBINARS_PER_PAGE);
        if ($webinars['old_count'] > 0) {
            $pageWebinars = array_slice(array_reverse($webinars['webinars']), $pageCurrent * WEBINARS_PER_PAGE, WEBINARS_PER_PAGE);
            foreach ($pageWebinars as $entry)
                if (!$entry['is_upcoming'])
                    $message .= SourceBot::composeWebinarSnippet($entry);
            if ($webinars['old_count'] > WEBINARS_PER_PAGE) {
                if ($pageCurrent == 0)
                    $buttons[0] = [
                        ['‚èπ', 'W_old_0'],
                        ['1', 'W_old_0'],
                        ['‚ñ∂Ô∏è', 'W_old_1']
                    ];
                elseif ($pageCurrent == $pagesCount - 1)
                    $buttons[0] = [
                        ['‚óÄÔ∏è', 'W_old_' . ($pageCurrent - 1)],
                        [$hPageCurrent, 'W_old_' . $pageCurrent],
                        ['‚èπ', 'W_old_' . $pageCurrent]
                    ];
                else
                    $buttons[0] = [
                        ['‚óÄÔ∏è', 'W_old_' . ($pageCurrent - 1)],
                        [$hPageCurrent, 'W_old_' . $pageCurrent],
                        ['‚ñ∂Ô∏è', 'W_old_' . ($pageCurrent + 1)]
                    ];
            }
        } else {
            $message .= '–ù–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π.';
        }
        $buttons[] = [['üóì –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ', 'W_upcoming']];
        $bot->execute($query->editMessageText($message, ['reply_markup' => VTgInlineKeyboard::table($buttons)->json()]));
        $bot->execute($query->answerWithText('–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ' . $hPageCurrent . ' –∏–∑ ' . $pagesCount));
    } else {
        $message = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è: \n\n";
        $webinars = SourceBot::getCachedWebinars();
        if ($webinars['upcoming_count'] > 0) {
            foreach ($webinars['webinars'] as $entry)
                if ($entry['is_upcoming'])
                    $message .= SourceBot::composeWebinarSnippet($entry);
        } else {
            $message .= '–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π.';
        }
        $bot->execute($query->editMessageText($message, ['reply_markup' => VTgInlineKeyboard::singleP('üìö –ü—Ä–æ—à–µ–¥—à–∏–µ', 'W_old')->json()]));
    }
});

SourceBot::processUpdatePost();
